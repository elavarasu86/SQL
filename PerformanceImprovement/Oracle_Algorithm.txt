Joins:

Nested Loops:
Is the simplest join criteria used by Oracle.
Joins two tables by fetching the result from one table and querying the other table for each row from the first to last.

1. Easist to implement
2. Time consuming for large datasets
3. better with either small datasets or index on join attributes.

For Example:
Employee table 
EmployeeNo	EmployeeName	DeptNo
123			Craig			10
234			Ami				10
124			Mike			20
452			Robin			30
876			Steve			20
963			Selvam			10

Depart Table:
DeptNo	DeptName
10		IT
20		SME
30		Business

If we join above two tables with Nested Loops Join

First row from department table will be picked, in our case DeptNo 10  and joined with Employee table. 
DeptNo from Department table will join with all the rows in Employee table, matching records will be stored in resultset.
And then second row from Department table will be picked.

Merge Join:
Merge join combines two sorted lists like a zipper. Both sides of the join must be presorted.

1. Efficient for large datasets
2. Pre-join preparation required(sorting)
3. Scanning of relation happens once while joining
4. Can leverage indexes if available to make it faster.

For Example:
Employee table 
EmployeeNo	EmployeeName	DeptNo
123			Craig			10
234			Ami				10
963			Selvam			10
124			Mike			20
876			Steve			20
452			Robin			30

Depart Table:
DeptNo	DeptName
10		IT
20		SME
30		Business

In the above tables as two tables are sorted. First record from department table will check for matching records from employee table. As both tables are sorted already once the Department number 10 matches are done and department number 20 record comes we are sure there is no more department number 10 record is available in the table.

Hash Join:
The hash join loads the candidate records from one side of the join into a hash table that is then probed for each row from the other side of the join.

1. Well suited for equi-joins
2. Efficient for large datasets
3. Pre-join preparation required(Hash table construction
4. Requires additional memory.

For Example:
Employee table 
EmployeeNo	EmployeeName	DeptNo
123			Craig			10
234			Ami				10
124			Mike			20
452			Robin			30
876			Steve			20
963			Selvam			10

Depart Table:
DeptNo	DeptName
10		IT
20		SME
30		Business

From the above table hash table will be generated on one of the table for example in employee table.

Hash table:
DepartNo	Exmployee No
10			<123,..>,<234,..>,<963,..>
20			<124,..>,<876,..>
30			<452,..>

Now from department table if we pick DeptNo 10 record join with hash table with deptNo 10 we will get all the 3 records. Similar approach for Deptno 20, 30 records.

Sorting and Grouping
SORT ORDER BY
Sorts the result according to the order by clause. This operation needs large amounts of memory to materialize the intermediate result (not pipelined).

SORT ORDER BY STOPKEY
Sorts a subset of the result according to the order by clause. Used for top-N queries if pipelined execution is not possible.

SORT GROUP BY
Sorts the result set on the group by columns and aggregates the sorted result in a second step. This operation needs large amounts of memory to materialize the intermediate result set (not pipelined).

SORT GROUP BY NOSORT
Aggregates a presorted set according the group by clause. This operation does not buffer the intermediate result: it is executed in a pipelined manner.

HASH GROUP BY
Groups the result using a hash table. This operation needs large amounts of memory to materialize the intermediate result set (not pipelined). The output is not ordered in any meaningful way.

Top-N Queries
The efficiency of top-N queries depends on the execution mode of the underlying operations. They are very inefficient when aborting non-pipelined operations such as SORT ORDER BY.

COUNT STOPKEY
Aborts the underlying operations when the desired number of rows was fetched.

WINDOW NOSORT STOPKEY
Uses a window function (over clause) to abort the execution when the desired number of rows was fetched. 

Index and Table Access
INDEX UNIQUE SCAN
The INDEX UNIQUE SCAN performs the B-tree traversal only. The database uses this operation if a unique constraint ensures that the search criteria will match no more than one entry. See also Chapter 1, “Anatomy of an SQL Index”.

INDEX RANGE SCAN
The INDEX RANGE SCAN performs the B-tree traversal and follows the leaf node chain to find all matching entries. See also Chapter 1, “Anatomy of an SQL Index”.

The so-called index filter predicates often cause performance problems for an INDEX RANGE SCAN. The next section explains how to identify them.

INDEX FULL SCAN
Reads the entire index—all rows—in index order. Depending on various system statistics, the database might perform this operation if it needs all rows in index order—e.g., because of a corresponding order by clause. Instead, the optimizer might also use an INDEX FAST FULL SCAN and perform an additional sort operation. See Chapter 6, “Sorting and Grouping”.

INDEX FAST FULL SCAN
Reads the entire index—all rows—as stored on the disk. This operation is typically performed instead of a full table scan if all required columns are available in the index. Similar to TABLE ACCESS FULL, the INDEX FAST FULL SCAN can benefit from multi-block read operations. See Chapter 5, “Clustering Data: The Second Power of Indexing”.

TABLE ACCESS BY INDEX ROWID
Retrieves a row from the table using the ROWID retrieved from the preceding index lookup. See also Chapter 1, “Anatomy of an SQL Index”.

TABLE ACCESS FULL
This is also known as full table scan. Reads the entire table—all rows and columns—as stored on the disk. Although multi-block read operations improve the speed of a full table scan considerably, it is still one of the most expensive operations. Besides high IO rates, a full table scan must inspect all table rows so it can also consume a considerable amount of CPU time. See also “Full Table Scan”.